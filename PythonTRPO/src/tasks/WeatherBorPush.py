from typing import List, Union, Dict, Any
from apscheduler.schedulers.background import BackgroundScheduler
import telebot
from telebot import types
import requests
import matplotlib.pyplot as plt
import matplotlib
from icecream import ic
from datetime import datetime
import pandas as pd

matplotlib.use("agg")

TELEGRAM_BOT_TOKEN: str = '6803912561:AAHhBAfSSo3hvIeoiZ_nUPlB3hW4bELRlIY'
API_KEY: str = '742c32b186b8d4a4f02f95372d981ed4'

bot: telebot.TeleBot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
scheduler: BackgroundScheduler = BackgroundScheduler()

grad_mng: Union[None, int] = None
city_mng_name: Union[None, str] = None
direction_mng_grad: Union[None, str] = None
current_chat: Union[None, str] = None


def start_monitoring(message: types.Message) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global current_chat
    current_chat = str(message.chat.id)
    bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    bot.register_next_step_handler(message, grad)


def grad(message: types.Message) -> None:
    """–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global city_mng_name
    city_mng_name = message.text
    bot.send_message(message.chat.id, text="–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥–æ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É")
    bot.register_next_step_handler(message, direction_grad)


def direction_grad(message: types.Message) -> None:
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    global grad_mng
    grad_mng = int(message.text)
    keyboard = types.ReplyKeyboardMarkup(row_width=1)
    upper = types.KeyboardButton(text='–í—ã—à–µ')
    lower = types.KeyboardButton(text='–ù–∏–∂–µ')
    keyboard.add(upper, lower)
    bot.send_message(message.chat.id, text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
                     reply_markup=keyboard)
    bot.register_next_step_handler(message, set_monitoring)


def set_monitoring(message: types.Message) -> None:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global direction_mng_grad
    direction_mng_grad = message.text.lower()
    bot.send_message(message.chat.id,
                     text=f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_mng_name} "
                          f"—Å –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π {direction_mng_grad} {grad_mng}¬∞C.")
    scheduler.add_job(monitor_weather, 'interval', minutes=10, args=[message])
    scheduler.start()


@bot.message_handler(commands=["start"])
def start(message: types.Message) -> None:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b_geo = types.KeyboardButton(text='üó∫Ô∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
    b_mntr = types.KeyboardButton(text='üïµüèª–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã')
    b_forecast = types.KeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥')
    markup.add(b_geo, b_mntr, b_forecast)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã –∏ –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É: \n–í—ã–≤–æ–¥–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã',
                     reply_markup=markup)


@bot.message_handler(content_types=['location'])
def weather_location(message: types.Message) -> None:
    """–°—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    global lat, lon
    lat, lon = message.location.latitude, message.location.longitude
    city_name = get_city_name_by_coordinates(lat, lon)
    if city_name:
        bot.send_message(message.chat.id, get_weather(city_name))
    else:
        bot.reply_to(message,
                     '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')


def get_weather(city_name: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞"""
    try:
        global data
        url = f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&units=metric&lang=ru&appid={API_KEY}'
        response = requests.get(url)
        data = response.json()
        if response.status_code == 200:
            temperature = data['main']['temp']
            description = data['weather'][0]['description']
            return f'–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_name}: {temperature}¬∞C, {description}.'
        else:
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.'
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'


@bot.message_handler(func=lambda message: message.text != '')
def monitor_command(message: types.Message) -> None:
    if message.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥':
        bot.send_message(message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
        bot.register_next_step_handler(message, get_forecast)
    elif message.text == 'üïµüèª–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã':
        start_monitoring(message)
    else:
        bot.send_message(message.chat.id, get_weather(message.text))


def plot_temperature_graph(data_t: List[Dict[str, Union[str, float]]], city_name: str) -> None:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –Ω–∞ 5 –¥–Ω–µ–π"""
    df = pd.DataFrame(data_t)
    df['date'] = pd.to_datetime(df['date'])

    plt.figure(figsize=(10, 6))
    plt.plot(df['date'], df['temperature'], marker='o', linestyle='-', color='b')
    plt.title(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    plt.grid(True)
    plt.savefig('temperature_graph.png')
    plt.close()


def get_city_name_by_coordinates(latitude: float, longitude: float) -> Union[str, None]:
    """–ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        url = f'http://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}'
        response = requests.get(url)
        data_t = response.json()

        if response.status_code == 200 and 'address' in data_t:
            city = data_t['address'].get('city') or data_t['address'].get('town') or data_t['address'].get('village')
            return city
        else:
            return None
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return None


def get_forecast(message: types.Message) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥"""
    city_name = message.text
    try:
        url = f'http://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={API_KEY}&units=metric&lang=ru'
        response = requests.get(url)
        data_t = response.json()

        if response.status_code == 200:
            forecast_data = []

            for item in data_t['list']:
                timestamp = item['dt']
                date = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                temperature = item['main']['temp']
                forecast_data.append({'date': date, 'temperature': temperature})
            plot_temperature_graph(forecast_data, city_name)
            with open('temperature_graph.png', 'rb') as photo:
                bot.send_photo(message.chat.id, photo)
        else:
            return None
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ forecast: {e}')
        return None


def monitor_weather(message: types.Message) -> None:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã"""
    global grad_mng, city_mng_name, current_chat, direction_mng_grad
    if grad_mng is not None and city_mng_name is not None:
        url = f'https://api.openweathermap.org/data/2.5/weather?q={city_mng_name}&units=metric&lang=ru&appid={API_KEY}'
        response = requests.get(url)
        current_weather = response.json()
        if current_weather is not None:
            temperature = current_weather['main']['temp']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if temperature < grad_mng and direction_mng_grad == "–Ω–∏–∂–µ":
                bot.send_message(message.chat.id,
                                 f'–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city_mng_name} –º–µ–Ω—å—à–µ {grad_mng}¬∞C.')
            elif temperature > grad_mng and direction_mng_grad == "–≤—ã—à–µ":
                bot.send_message(message.chat.id,
                                 f'–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city_mng_name} –≤—ã—à–µ {grad_mng}¬∞C.')
        else:
            bot.send_message(message.chat.id,
                             '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


def Bot_Run() -> None:
    bot.polling(none_stop=True, interval=0)
