import requests
import telebot
from telebot import types
import matplotlib.pyplot as plt
import matplotlib
from icecream import ic
from datetime import datetime
import pandas as pd
from apscheduler.schedulers.background import BackgroundScheduler

matplotlib.use('agg')

TELEGRAM_BOT_TOKEN = '6803912561:AAHhBAfSSo3hvIeoiZ_nUPlB3hW4bELRlIY'
API_KEY = '742c32b186b8d4a4f02f95372d981ed4'

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
scheduler = BackgroundScheduler()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    b_mntr = types.KeyboardButton(text='üïµüèª–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã')
    b_geo = types.KeyboardButton(text='üó∫Ô∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
    markup.add(b_mntr, b_geo)
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã –∏ –≤–æ—Ç —á—Ç–æ —è –º–æ–≥—É: \n1. –ü—Ä–∏—Å–ª–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç'
                     '\n2. –°–æ—Å—Ç–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥\n3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã\n –£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é'
                     ' –ø–æ–≥–æ–¥—É –º–æ–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def weather_location(message):
    global lat, lon
    lat, lon = message.location.latitude, message.location.longitude
    city_name = get_city_name_by_coordinates(lat, lon)

    if city_name:
        get_weather(city_name)
    else:
        bot.reply_to(message,
                     '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.')


# @bot.message_handler(text='üïµüèª–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã')
# def monitor_command(message):
#     bot.send_message(message.chat.id,
#                      '–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –∞ —Ç–∞–∫–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–Ø —Å–æ–æ–±—â—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ —Ç–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è')
#
#
# def set_monitoring(message, grad, city):
#     global grad_monitor, city_monitor
#     grad_monitor = grad
#     city_monitor = city
#     bot.send_message(chat_id=message.chat.id, text=f'–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≥–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_monitor} '
#                                                    f'—Å –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π {grad_monitor}¬∞C.')


# –†–µ–≥—É–ª—è—Ä–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
# @scheduler.scheduled_job('interval', minutes=10)
# def monitor_weather():
#     global grad_monitor, city_monitor, current_message
#     if grad_monitor is not None and city_monitor is not None:
#         # –í–∞—à –∫–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–≥–æ–¥—ã
#         current_weather = get_weather(city_monitor)
#
#         if current_weather is not None:
#             temperature = current_weather['main']['temp']
#
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
#             if temperature < grad_monitor:
#                 bot.send_message(current_message.chat.id, f'–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city_monitor} –º–µ–Ω—å—à–µ {grad_monitor}¬∞C.')
#             elif temperature > grad_monitor:
#                 bot.send_message(current_message.chat.id, f'–í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city_monitor} –≤—ã—à–µ {grad_monitor}¬∞C.')
#         else:
#             bot.send_message(current_message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def weather_text(message):
    global current_message
    current_message = message
    city_name = message.text
    get_weather(city_name)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –æ—Ç OpenWeatherMap API
def get_weather(city_name):
    try:
        global data
        url = f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&units=metric&lang=ru&appid={API_KEY}'
        ic(url)
        response = requests.get(url)
        data = response.json()

        ic(data)
        if response.status_code == 200:
            temperature = data['main']['temp']
            description = data['weather'][0]['description']
            return f'–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city_name}: {temperature}¬∞C, {description}.'
        else:
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.'
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –æ—Ç API
def get_forecast(city_name):
    try:
        ic('forecast')
        url = f'http://api.openweathermap.org/data/2.5/forecast?q={city_name}&appid={API_KEY}&units=metric&lang=ru'
        response = requests.get(url)
        data_t = response.json()

        if response.status_code == 200:
            forecast_data = []

            for item in data_t['list']:
                timestamp = item['dt']
                date = datetime.utcfromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                temperature = item['main']['temp']
                forecast_data.append({'date': date, 'temperature': temperature})

            return forecast_data
        else:
            return None
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞ forecast: {e}')
        return None


# –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
def plot_temperature_graph(data_t, city_name):
    df = pd.DataFrame(data_t)
    df['date'] = pd.to_datetime(df['date'])

    plt.figure(figsize=(10, 6))
    plt.plot(df['date'], df['temperature'], marker='o', linestyle='-', color='b')
    plt.title(f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 5 –¥–Ω–µ–π')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    plt.grid(True)
    plt.savefig('temperature_graph.png')


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≥–µ–æ–∫–æ–¥–µ—Ä–∞
def get_city_name_by_coordinates(latitude, longitude):
    try:
        url = f'http://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}'
        response = requests.get(url)
        data_t = response.json()

        if response.status_code == 200 and 'address' in data_t:
            city = data_t['address'].get('city') or data_t['address'].get('town') or data_t['address'].get('village')
            return city
        else:
            return None
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')
        return None


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
